// Generated by gencpp from file bionic_hand/FingerPos.msg
// DO NOT EDIT!


#ifndef BIONIC_HAND_MESSAGE_FINGERPOS_H
#define BIONIC_HAND_MESSAGE_FINGERPOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <bionic_hand/FingerJoints.h>
#include <bionic_hand/FingerJoints.h>
#include <bionic_hand/FingerJoints.h>

namespace bionic_hand
{
template <class ContainerAllocator>
struct FingerPos_
{
  typedef FingerPos_<ContainerAllocator> Type;

  FingerPos_()
    : header()
    , index()
    , middle()
    , thumb()  {
    }
  FingerPos_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , index(_alloc)
    , middle(_alloc)
    , thumb(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::bionic_hand::FingerJoints_<ContainerAllocator>  _index_type;
  _index_type index;

   typedef  ::bionic_hand::FingerJoints_<ContainerAllocator>  _middle_type;
  _middle_type middle;

   typedef  ::bionic_hand::FingerJoints_<ContainerAllocator>  _thumb_type;
  _thumb_type thumb;





  typedef boost::shared_ptr< ::bionic_hand::FingerPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bionic_hand::FingerPos_<ContainerAllocator> const> ConstPtr;

}; // struct FingerPos_

typedef ::bionic_hand::FingerPos_<std::allocator<void> > FingerPos;

typedef boost::shared_ptr< ::bionic_hand::FingerPos > FingerPosPtr;
typedef boost::shared_ptr< ::bionic_hand::FingerPos const> FingerPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bionic_hand::FingerPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bionic_hand::FingerPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bionic_hand::FingerPos_<ContainerAllocator1> & lhs, const ::bionic_hand::FingerPos_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.index == rhs.index &&
    lhs.middle == rhs.middle &&
    lhs.thumb == rhs.thumb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bionic_hand::FingerPos_<ContainerAllocator1> & lhs, const ::bionic_hand::FingerPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bionic_hand

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::FingerPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::FingerPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::FingerPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::FingerPos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::FingerPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::FingerPos_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bionic_hand::FingerPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddb23831c46fbe010de19d051a0b3b5e";
  }

  static const char* value(const ::bionic_hand::FingerPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddb23831c46fbe01ULL;
  static const uint64_t static_value2 = 0x0de19d051a0b3b5eULL;
};

template<class ContainerAllocator>
struct DataType< ::bionic_hand::FingerPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bionic_hand/FingerPos";
  }

  static const char* value(const ::bionic_hand::FingerPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bionic_hand::FingerPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"FingerJoints index\n"
"FingerJoints middle\n"
"FingerJoints thumb\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: bionic_hand/FingerJoints\n"
"float64 theta_M\n"
"float64 theta_P\n"
"float64 theta_D\n"
;
  }

  static const char* value(const ::bionic_hand::FingerPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bionic_hand::FingerPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.index);
      stream.next(m.middle);
      stream.next(m.thumb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FingerPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bionic_hand::FingerPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bionic_hand::FingerPos_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "index: ";
    s << std::endl;
    Printer< ::bionic_hand::FingerJoints_<ContainerAllocator> >::stream(s, indent + "  ", v.index);
    s << indent << "middle: ";
    s << std::endl;
    Printer< ::bionic_hand::FingerJoints_<ContainerAllocator> >::stream(s, indent + "  ", v.middle);
    s << indent << "thumb: ";
    s << std::endl;
    Printer< ::bionic_hand::FingerJoints_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIONIC_HAND_MESSAGE_FINGERPOS_H
